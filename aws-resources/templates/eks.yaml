apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: {{ .Values.composition.name }}
  labels:
    provider: aws
    cluster: eks
spec:
  compositeTypeRef:
    apiVersion: prodready.cluster/v1alpha1
    kind: CompositeCluster
  writeConnectionSecretsToNamespace: {{ .Values.secret_ns }}
  patchSets:
  - name: metadata
    patches:
    - fromFieldPath: metadata.labels
  resources:
  - name: ekscluster
    base:
      apiVersion: eks.aws.crossplane.io/v1beta1
      kind: Cluster
      spec:
        forProvider:
          region: {{ .Values.region }}
          version: "1.27"
          roleArnSelector:
            matchControllerRef: true
          resourcesVpcConfig:
            endpointPrivateAccess: true
            endpointPublicAccess: true
            subnetIdSelector:
              matchControllerRef: true
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
    - fromFieldPath: spec.parameters.version
      toFieldPath: spec.forProvider.version
    - fromFieldPath: spec.id
      toFieldPath: spec.writeConnectionSecretToRef.name
      transforms:
        - type: string
          string:
            fmt: "%s-cluster"
    - fromFieldPath: spec.id
      toFieldPath: spec.forProvider.roleArnSelector.matchLabels.role
      transforms:
        - type: string
          string:
            fmt: "%s-controlplane"
    - type: ToCompositeFieldPath
      fromFieldPath: metadata.name
      toFieldPath: status.clusterName
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.status
      toFieldPath: status.controlPlaneStatus
    - fromFieldPath: spec.writeConnectionSecretToRef.namespace
      toFieldPath: spec.writeConnectionSecretToRef.namespace
    readinessChecks:
    - type: MatchString
      fieldPath: status.atProvider.status
      matchString: ACTIVE
    connectionDetails:
      - fromConnectionSecretKey: kubeconfig
  - name: eksnodegroup
    base:
      apiVersion: eks.aws.crossplane.io/v1alpha1
      kind: NodeGroup
      spec:
        forProvider:
          region: {{ .Values.region }}
          clusterNameSelector:
            matchControllerRef: true
          nodeRoleSelector:
            matchControllerRef: true
          subnetSelector:
            matchLabels:
              access: public
          scalingConfig:
            minSize: {{ .Values.resources.nodegroup.scalingconfig.min }}
            maxSize: {{ .Values.resources.nodegroup.scalingconfig.max }}
            desiredSize: {{ .Values.resources.nodegroup.scalingconfig.desired }}
          instanceTypes:
            - t3.small
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
    - fromFieldPath: spec.parameters.nodeSize
      toFieldPath: spec.forProvider.instanceTypes[0]
      transforms:
        - type: map
          map:
            small: t3.small
            medium: t3.medium
            large: t3.large
    - fromFieldPath: spec.id
      toFieldPath: spec.forProvider.nodeRoleSelector.matchLabels.role
      transforms:
        - type: string
          string:
            fmt: "%s-nodegroup"
    - fromFieldPath: spec.parameters.minNodeCount
      toFieldPath: spec.forProvider.scalingConfig.minSize
    - fromFieldPath: spec.parameters.minNodeCount
      toFieldPath: spec.forProvider.scalingConfig.desiredSize
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.status
      toFieldPath: status.nodePoolStatus
    readinessChecks:
    - type: MatchString
      fieldPath: status.atProvider.status
      matchString: ACTIVE
  - name: iamrole-controlplane
    base:
      apiVersion: iam.aws.crossplane.io/v1beta1
      kind: Role
      spec:
        forProvider:
          assumeRolePolicyDocument: |
            {
              "Version": "2012-10-17",
              "Statement": [
                  {
                      "Effect": "Allow",
                      "Principal": {
                          "Service": [
                              "eks.amazonaws.com"
                          ]
                      },
                      "Action": [
                          "sts:AssumeRole"
                      ]
                  }
              ]
            }
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            fmt: "%s-controlplane"
    - fromFieldPath: spec.id
      toFieldPath: metadata.labels.role
      transforms:
        - type: string
          string:
            fmt: "%s-controlplane"
  - name: iamrole-nodegroup
    base:
      apiVersion: iam.aws.crossplane.io/v1beta1
      kind: Role
      spec:
        forProvider:
          assumeRolePolicyDocument: |
            {
              "Version": "2012-10-17",
              "Statement": [
                  {
                      "Effect": "Allow",
                      "Principal": {
                          "Service": [
                              "ec2.amazonaws.com"
                          ]
                      },
                      "Action": [
                          "sts:AssumeRole"
                      ]
                  }
              ]
            }
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            fmt: "%s-nodegroup"
    - fromFieldPath: spec.id
      toFieldPath: metadata.labels.role
      transforms:
        - type: string
          string:
            fmt: "%s-nodegroup"
  - name: iamattachment-controlplane
    base:
      apiVersion: iam.aws.crossplane.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        forProvider:
          policyArn: arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
          roleNameSelector:
            matchControllerRef: true
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            fmt: "%s-controlplane"
    - fromFieldPath: spec.id
      toFieldPath: spec.forProvider.roleNameSelector.matchLabels.role
      transforms:
        - type: string
          string:
            fmt: "%s-controlplane"
  - name: iamattachment-service
    base:
      apiVersion: iam.aws.crossplane.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        forProvider:
          policyArn: arn:aws:iam::aws:policy/AmazonEKSServicePolicy
          roleNameSelector:
            matchControllerRef: true
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            fmt: "%s-service"
    - fromFieldPath: spec.id
      toFieldPath: spec.forProvider.roleNameSelector.matchLabels.role
      transforms:
        - type: string
          string:
            fmt: "%s-controlplane"
  - name: iamattachment-worker
    base:
      apiVersion: iam.aws.crossplane.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        forProvider:
          policyArn: arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
          roleNameSelector:
            matchControllerRef: true
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            fmt: "%s-worker"
    - fromFieldPath: spec.id
      toFieldPath: spec.forProvider.roleNameSelector.matchLabels.role
      transforms:
        - type: string
          string:
            fmt: "%s-nodegroup"
  - name: iamattachment-cni
    base:
      apiVersion: iam.aws.crossplane.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        forProvider:
          policyArn: arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
          roleNameSelector:
            matchControllerRef: true
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            fmt: "%s-cni"
    - fromFieldPath: spec.id
      toFieldPath: spec.forProvider.roleNameSelector.matchLabels.role
      transforms:
        - type: string
          string:
            fmt: "%s-nodegroup"
  - name: iamattachment-registry
    base:
      apiVersion: iam.aws.crossplane.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        forProvider:
          policyArn: arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
          roleNameSelector:
            matchControllerRef: true
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            fmt: "%s-registry"
    - fromFieldPath: spec.id
      toFieldPath: spec.forProvider.roleNameSelector.matchLabels.role
      transforms:
        - type: string
          string:
            fmt: "%s-nodegroup"
  - name: vpc-nodepool
    base:
      apiVersion: ec2.aws.crossplane.io/v1beta1
      kind: VPC
      spec:
        forProvider:
          region: {{ .Values.region }}
          cidrBlock: {{ .Values.resources.vpc.cidr }}
          enableDnsSupport: true
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
  - name: sg-nodepool
    base:
      apiVersion: ec2.aws.crossplane.io/v1beta1
      kind: SecurityGroup
      spec:
        forProvider:
          description: Cluster communication with worker nodes
          groupName: {{ .Values.resources.sg.groupname }}
          region: {{ .Values.region }}
          vpcIdSelector:
            matchControllerRef: true
          {{ if .Values.resources.sg.egress.enabled }}
          egress:
          - fromPort: 0
            toPort: 0
            ipProtocol: {{ .Values.resources.sg.egress.protocol }}
            ipRanges:
            - cidrIp: {{ .Values.resources.sg.egress.cidr }}
          {{ end }}
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
  - name: subnet-nodepool-1a
    base:
      apiVersion: ec2.aws.crossplane.io/v1beta1
      kind: Subnet
      metadata:
        labels:
          zone: {{ .Values.region }}a
          access: public
      spec:
        forProvider:
          region: {{ .Values.region }}
          availabilityZone: {{ .Values.region }}a
          cidrBlock: {{ .Values.resources.subnet_1a.cidr }}
          vpcIdSelector:
            matchControllerRef: true
          mapPublicIPOnLaunch: true
          tags:
          - key: kubernetes.io/role/elb
            value: "1"
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            fmt: "%s-1a"
  - name: subnet-nodepool-1b
    base:
      apiVersion: ec2.aws.crossplane.io/v1beta1
      kind: Subnet
      metadata:
        labels:
          zone: {{ .Values.region }}b
          access: public
      spec:
        forProvider:
          region: {{ .Values.region }}
          availabilityZone: {{ .Values.region }}b
          cidrBlock: {{ .Values.resources.subnet_1b.cidr }}
          vpcIdSelector:
            matchControllerRef: true
          mapPublicIPOnLaunch: true
          tags:
          - key: kubernetes.io/role/elb
            value: "1"
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            fmt: "%s-1b"
  - name: subnet-nodepool-1c
    base:
      apiVersion: ec2.aws.crossplane.io/v1beta1
      kind: Subnet
      metadata:
        labels:
          zone: {{ .Values.region }}c
          access: public
      spec:
        forProvider:
          region: {{ .Values.region }}
          availabilityZone: {{ .Values.region }}c
          cidrBlock: {{ .Values.resources.subnet_1c.cidr }}
          vpcIdSelector:
            matchControllerRef: true
          mapPublicIPOnLaunch: true
          tags:
          - key: kubernetes.io/role/elb
            value: "1"
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            fmt: "%s-1c"
  - name: gateway
    base:
      apiVersion: ec2.aws.crossplane.io/v1beta1
      kind: InternetGateway
      spec:
        forProvider:
          region: {{ .Values.region }}
          vpcIdSelector:
            matchControllerRef: true
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
  - name: routetable
    base:
      apiVersion: ec2.aws.crossplane.io/v1beta1
      kind: RouteTable
      spec:
        forProvider:
          region: {{ .Values.region }}
          vpcIdSelector:
            matchControllerRef: true
          routes:
            - destinationCidrBlock: {{ .Values.resources.routetable.destinationCidrBlock }}
              gatewayIdSelector:
                matchControllerRef: true
          associations:
            - subnetIdSelector:
                matchControllerRef: true
                matchLabels:
                  zone: {{ .Values.region }}a
                  access: public
            - subnetIdSelector:
                matchControllerRef: true
                matchLabels:
                  zone: {{ .Values.region }}b
                  access: public
            - subnetIdSelector:
                matchControllerRef: true
                matchLabels:
                  zone: {{ .Values.region }}c
                  access: public
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name

